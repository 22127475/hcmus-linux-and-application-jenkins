pipeline {
  agent any

  environment {
    DOCKERHUB_CREDENTIALS_ID = 'Docker_Jenkins_CD'
    DOCKER_REGISTRY        = '22127475'
  }
  
  stages {
    stage('Install dependencies') {
      steps {        
        dir("${env.WORKSPACE}") {
          
          echo "Installing Node.js dependencies..."
          
          sh '''
            npm install
          '''
        }
      }
    }

    stage('Lint code') {
      steps {
        dir("${env.WORKSPACE}") {
          echo "Linting code..."
          sh '''
            npx eslint ./src_web/**/*.js
            npx stylelint "./src_web/**/*.css"
            npx htmlhint "./src_web/**/*.html"
          '''
        }    
      }
    }

    stage('Minify + Obfuscate') {
      steps {
        dir("${env.WORKSPACE}") {
          echo "Minifying and obfuscating code..."
          script {
            tempFolderName = "temp_${env.BUILD_ID}"
            
            sh """
              mkdir -p $tempFolderName
  
              # Minify HTML
              npx html-minifier-terser --collapse-whitespace --remove-comments --minify-css true --minify-js true -o $tempFolderName/index.html src_web/index.html
  
              # Minify CSS
              npx clean-css-cli -o $tempFolderName/style.css src_web/style.css
  
              # Obfuscate JS
              npx javascript-obfuscator src_web/script.js --output $tempFolderName/script.js

              cp -r ./nginx $tempFolderName/
            """  
          }
        }
      }
    }

    stage('Build and Push Images to Docker Hub') {
      steps {
        dir("${env.WORKSPACE}") {
          script {
            echo "Building and pushing Docker image..."
            docker.withRegistry('https://index.docker.io/v1/', env.DOCKERHUB_CREDENTIALS_ID) {
              def commitID = sh(script: 'git rev-parse HEAD', returnStdout: true).trim()
              def imageName = "${env.DOCKER_REGISTRY}/jenkinsapp:${env.BRANCH_NAME}-${commitID}"

              sh """
                docker build -f Dockerfile -t ${imageName} ${tempFolderName}
                docker push ${imageName}
              """
            }
          }
        }
      }
    }
  }

  post {
    success {
      echo '‚úÖ Build success'
    }
    failure {
      echo '‚ùå Build failed'
    }
    always {
      echo 'üîÑ Cleaning up temporary files...'
      sh "rm -rf ${tempFolderName}"
    }
  }
}






























