pipeline {
  agent any

  environment {
    DOCKERHUB_CREDENTIALS_ID = 'Docker_Jenkins_CD'
    DOCKER_REGISTRY        = '22127475'
  }

  stages {
    stage('Install dependencies') {
      steps {        
        echo "Installing Node.js dependencies..."
        sh '''
          npm install
        '''
      }
    }

    stage('Lint code') {
      steps {
        sh '''
          echo "Linting JavaScript..."
          npx eslint ../../src_web/**/*.js || true

          echo "Linting CSS..."
          npx stylelint "../../src_web/**/*.css" || true

          echo "Linting HTML..."
          npx htmlhint ../../src_web/**/*.html || true

          echo "‚úÖ Lint all html, css, js in src_web/"
        '''
      }
    }

    stage('Minify + Obfuscate') {
      steps {
        sh '''
          mkdir temp

          # Minify HTML
          npx html-minifier-terser --collapse-whitespace --remove-comments --minify-css true --minify-js true -o temp/index.html ../../src_web/index.html

          # Minify CSS
          npx clean-css-cli -o temp/style.css ../../src_web/style.css

          # Obfuscate JS
          npx javascript-obfuscator ../../src_web/script.js --output temp/script.js
        '''
      }
    }

    stage('Build and Push Images to Docker Hub') {
      steps {
        script {
          echo "Building and pushing Docker image..."
          docker.withRegistry('https://index.docker.io/v1/', env.DOCKERHUB_CREDENTIALS_ID) {
            
            def commitID = sh(script: 'git rev-parse --short HEAD', returnStdout: true).trim()
            if (env.BRANCH_NAME == 'main') {
              commitID = 'latest'
            } else if (env.BRANCH_NAME == 'dev') {
              commitID = 'dev-' + commitID
            }
          

            def imageName = "${env.DOCKER_REGISTRY}/jenkinsapp:${commitID}"

            sh """
              docker build -f ../../dockerfile -t ${imageName} temp/
              docker push ${imageName}
            """
          }
        }
      }
    }

    
  }

  post {
    success {
      echo '‚úÖ Build success'
    }
    failure {
      echo '‚ùå Build failed'
    }
    always {
      echo 'üîÑ Cleaning up temporary files...'
      cleanWS()
      sh 'rm -rf temp'
    }
  }
}
