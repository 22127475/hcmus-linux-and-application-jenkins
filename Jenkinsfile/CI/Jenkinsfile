pipeline {
  agent any

  environment {
    DOCKERHUB_CREDENTIALS_ID = 'Docker_Jenkins_CD'
    DOCKER_REGISTRY        = '22127475'
  }

  stages {
    stage('Install dependencies') {
      steps {        
        dir("${env.WORKSPACE}") {
          sh '''
          whoami
          
          '''
          echo "Installing Node.js dependencies..."
          
          sh '''
            npm install
          '''
        }
        
      }
    }

    stage('Lint code') {
      steps {
        dir("${env.WORKSPACE}") {
          echo "Linting code..."
          sh '''
            npx eslint ./src_web/**/*.js || true
            npx stylelint "./src_web/**/*.css" || true
            npx htmlhint "./src_web/**/*.html" || true
          '''
        }
        
      }
    }

    stage('Minify + Obfuscate') {
      steps {
        dir("${env.WORKSPACE}") {
          echo "Minifying and obfuscating code..."
          sh '''
            mkdir -p temp

            # Minify HTML
            npx html-minifier-terser --collapse-whitespace --remove-comments --minify-css true --minify-js true -o temp/index.html src_web/index.html

            # Minify CSS
            npx clean-css-cli -o temp/style.css src_web/style.css

            # Obfuscate JS
            npx javascript-obfuscator src_web/script.js --output temp/script.js
          '''
        }
        
      }
    }

    stage('Build and Push Images to Docker Hub') {
      steps {
        dir("${env.WORKSPACE}") {
          script {
            echo "Building and pushing Docker image..."
            docker.withRegistry('https://index.docker.io/v1/', env.DOCKERHUB_CREDENTIALS_ID) {
              
              def commitID = sh(script: 'git rev-parse --short HEAD', returnStdout: true).trim()
              if (env.BRANCH_NAME == 'main') {
                commitID = 'latest'
              } else if (env.BRANCH_NAME == 'dev') {
                commitID = 'dev-' + commitID
              }
            

              def imageName = "${env.DOCKER_REGISTRY}/jenkinsapp:${commitID}"

              sh """
                docker build -f ../../dockerfile -t ${imageName} temp/
                docker push ${imageName}
              """
            }
          }
        }
        
      }
    }

    
  }

  post {
    success {
      echo '‚úÖ Build success'
    }
    failure {
      echo '‚ùå Build failed'
    }
    always {
      echo 'üîÑ Cleaning up temporary files...'
      sh 'rm -rf temp'
    }
  }
}



