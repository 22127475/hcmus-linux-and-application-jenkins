#!/bin/bash

set -e

# ========================== #
# üü° Bi·∫øn c·∫•u h√¨nh
# ========================== #
CLUSTER_NAME="linux-and-application"
REGION="us-east-1"
DOCKER_IMAGE="$1"  # v√≠ d·ª•: 22127475/jenkinsapp:main-abc123
TASK_DEF_NAME="jenkins-app-$(date +%s)"
CONTAINER_NAME="jenkins-app"

# ========================== #
# üì¶ L·∫•y th√¥ng tin t·ª´ CloudFormation
# ========================== #
SUBNET_1=$(aws cloudformation list-exports --query "Exports[?Name=='Project01-Public-Subnet-1a'].Value" --output text)
SUBNET_2=$(aws cloudformation list-exports --query "Exports[?Name=='Project01-Public-Subnet-1b'].Value" --output text)
SECURITY_GROUP=$(aws cloudformation list-exports --query "Exports[?Name=='Project01-App-Tier-SG-ID'].Value" --output text)
TARGET_GROUP_ARN=$(aws cloudformation list-exports --query "Exports[?Name=='JenkinsApp-TG-ARN'].Value" --output text)
ALB_DNS=$(aws cloudformation list-exports --query "Exports[?Name=='Project01-ALB-DNSName'].Value" --output text)

# ========================== #
# üõ† ƒêƒÉng k√Ω Task Definition
# ========================== #
echo "üöÄ Registering ECS task definition with image: $DOCKER_IMAGE..."

aws ecs register-task-definition \
  --family "$TASK_DEF_NAME" \
  --requires-compatibilities FARGATE \
  --network-mode awsvpc \
  --cpu "256" \
  --memory "512" \
  --container-definitions "[{
    \"name\": \"$CONTAINER_NAME\",
    \"image\": \"$DOCKER_IMAGE\",
    \"essential\": true,
    \"portMappings\": [{
      \"containerPort\": 80,
      \"protocol\": \"tcp\"
    }]
  }]" \
  --region "$REGION" > /dev/null

echo "‚úÖ Task definition [$TASK_DEF_NAME] registered."

# ========================== #
# üîê M·ªü c·ªïng 80 n·∫øu c·∫ßn
# ========================== #
echo "üîí Checking if SG $SECURITY_GROUP allows TCP:80 from 0.0.0.0/0..."
HAS_RULE=$(aws ec2 describe-security-groups \
  --group-ids "$SECURITY_GROUP" \
  --query "SecurityGroups[0].IpPermissions[?FromPort==\`80\` && IpRanges[?CidrIp=='0.0.0.0/0']]" \
  --output text)

if [ -z "$HAS_RULE" ]; then
  echo "üõ†Ô∏è  Adding ingress rule for port 80..."
  aws ec2 authorize-security-group-ingress \
    --group-id "$SECURITY_GROUP" \
    --protocol tcp \
    --port 80 \
    --cidr 0.0.0.0/0
  echo "‚úÖ Port 80 opened to 0.0.0.0/0."
else
  echo "‚úÖ Security group already allows port 80 from 0.0.0.0/0."
fi

# ========================== #
# ‚ñ∂Ô∏è Ch·∫°y ECS task
# ========================== #
echo "üü¢ Running ECS task..."
TASK_ARN=$(aws ecs run-task \
  --cluster "$CLUSTER_NAME" \
  --launch-type FARGATE \
  --network-configuration "awsvpcConfiguration={subnets=[$SUBNET_1,$SUBNET_2],securityGroups=[$SECURITY_GROUP],assignPublicIp=ENABLED}" \
  --task-definition "$TASK_DEF_NAME" \
  --region "$REGION" \
  --query "tasks[0].taskArn" --output text)

echo "‚è≥ Waiting for task to run..."
aws ecs wait tasks-running --cluster "$CLUSTER_NAME" --tasks "$TASK_ARN"

# ========================== #
# üåê L·∫•y IP v√† ENI
# ========================== #
ENI_ID=$(aws ecs describe-tasks \
  --cluster "$CLUSTER_NAME" \
  --tasks "$TASK_ARN" \
  --query "tasks[0].attachments[0].details[?name=='networkInterfaceId'].value" \
  --output text)

PRIVATE_IP=$(aws ec2 describe-network-interfaces \
  --network-interface-ids "$ENI_ID" \
  --query "NetworkInterfaces[0].PrivateIpAddress" \
  --output text)

PUBLIC_IP=$(aws ec2 describe-network-interfaces \
  --network-interface-ids "$ENI_ID" \
  --query "NetworkInterfaces[0].Association.PublicIp" \
  --output text)

# ========================== #
# üîó G√°n v√†o ALB Target Group
# ========================== #
echo "üîó Registering private IP $PRIVATE_IP to ALB Target Group..."
aws elbv2 register-targets \
  --target-group-arn "$TARGET_GROUP_ARN" \
  --targets "Id=$PRIVATE_IP,Port=80"
echo "‚úÖ Task registered to ALB."

# ========================== #
# üì¢ K·∫øt qu·∫£
# ========================== #
echo ""
echo "========================= üîó ACCESS LINKS ========================="
echo "üîó ALB URL:           http://$ALB_DNS"
echo "üîó Direct Public IP:  http://$PUBLIC_IP"
echo "üì¶ ECS Task ARN:      $TASK_ARN"
echo "üß© ENI ID:            $ENI_ID"
echo "=================================================================="
